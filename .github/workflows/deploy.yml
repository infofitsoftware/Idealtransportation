name: Deploy to EC2

# This workflow will deploy the application to EC2
# Last updated: 2024-06-14

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Frontend Dependencies
      working-directory: ./
      run: |
        npm ci
        npm run build
        ls -la out/  # Verify build output
      env:
        NEXT_PUBLIC_API_URL: http://${{ secrets.EC2_HOST }}/api

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install "pydantic[email]"
        pip install -r requirements.txt

    - name: Run Backend Tests
      working-directory: ./backend
      run: pytest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Check EC2 Instance Status
      run: |
        echo "Checking EC2 instance status..."
        aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].[InstanceId,PublicIpAddress,State.Name,SecurityGroups[*].GroupId]" --output table
        
        echo "Checking instance security groups..."
        INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].[InstanceId]" --output text)
        if [ ! -z "$INSTANCE_ID" ]; then
          echo "Found instance: $INSTANCE_ID"
          aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].SecurityGroups[*].[GroupId,GroupName]" --output table
          
          echo "Checking security group rules..."
          SG_ID=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].SecurityGroups[*].GroupId" --output text)
          if [ ! -z "$SG_ID" ]; then
            aws ec2 describe-security-groups --group-ids $SG_ID --query "SecurityGroups[*].IpPermissions[*].[FromPort,ToPort,IpRanges[*].CidrIp]" --output table
          else
            echo "No security group found for instance"
          fi
        else
          echo "No running instances found"
        fi

    - name: Test SSH Connection
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          echo "Testing SSH connection..."
          whoami
          pwd
          hostname

    - name: Setup Application Directory
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          echo "Setting up application directory..."
          sudo apt-get update
          sudo apt-get install -y git nodejs npm python3-pip python3-venv nginx net-tools
          sudo mkdir -p /home/ubuntu/ideal-transportation
          sudo chown -R ubuntu:ubuntu /home/ubuntu/ideal-transportation
          sudo chmod o+x /home/ubuntu
          cd /home/ubuntu/ideal-transportation
          # Change ownership before removing files
          sudo chown -R ubuntu:ubuntu .
          rm -rf * .[^.]*

    - name: Clone Repository
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          cd /home/ubuntu/ideal-transportation
          git clone ${{ secrets.REPO_URL }} .
          ls -la

    - name: Setup Backend
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          # Create necessary directories
          sudo mkdir -p /var/log/ideal-transportation
          sudo chown -R ubuntu:ubuntu /var/log/ideal-transportation
          sudo chmod -R 755 /var/log/ideal-transportation
          
          # Create and configure virtual environment
          cd /home/ubuntu/ideal-transportation/backend
          python3 -m venv venv
          source venv/bin/activate
          
          # Upgrade pip and install wheel
          pip install --upgrade pip
          pip install wheel
          
          # Install dependencies in specific order
          pip uninstall -y sqlalchemy
          pip install "sqlalchemy==2.0.27"
          pip install "fastapi>=0.68.0"
          pip install "uvicorn>=0.15.0"
          pip install "psycopg2-binary>=2.9.0"
          pip install "email-validator>=2.0.0"
          pip install "pydantic[email]>=2.0.0"
          pip install "python-jose[cryptography]>=3.3.0"
          pip install "passlib[bcrypt]>=1.7.4"
          pip install "python-multipart>=0.0.5"
          pip install "python-dotenv>=0.19.0"
          pip install "httpx>=0.27.0"
          
          # Install remaining requirements
          pip install -r requirements.txt
          
          # Create environment file
          cat > .env << EOL
          DATABASE_URL=postgresql://idealtransport:idealtransport19041988@idealtransport.cvyuacwgotuv.ap-southeast-2.rds.amazonaws.com:5432/idealtransport
          SECRET_KEY=your-secret-key-here
          LOG_DIR=/var/log/ideal-transportation
          EOL
          
          # Create systemd service file
          sudo tee /etc/systemd/system/ideal-transportation.service << EOL
          [Unit]
          Description=Ideal Transportation Backend
          After=network.target
          
          [Service]
          User=ubuntu
          Group=ubuntu
          WorkingDirectory=/home/ubuntu/ideal-transportation/backend
          Environment="PATH=/home/ubuntu/ideal-transportation/backend/venv/bin"
          Environment="DATABASE_URL=postgresql://idealtransport:idealtransport19041988@idealtransport.cvyuacwgotuv.ap-southeast-2.rds.amazonaws.com:5432/idealtransport"
          Environment="SECRET_KEY=your-secret-key-here"
          Environment="LOG_DIR=/var/log/ideal-transportation"
          ExecStart=/home/ubuntu/ideal-transportation/backend/venv/bin/uvicorn main:app --host 0.0.0.0 --port 8000 --log-level debug
          Restart=always
          StandardOutput=append:/var/log/ideal-transportation.log
          StandardError=append:/var/log/ideal-transportation.error.log
          
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # Reload systemd and start service
          sudo systemctl daemon-reload
          sudo systemctl enable ideal-transportation
          sudo systemctl restart ideal-transportation
          
          # Wait a moment for the service to start
          sleep 5
          
          # Check service status and logs
          echo "=== Service Status ==="
          sudo systemctl status ideal-transportation
          
          echo "=== Application Logs ==="
          sudo tail -n 50 /var/log/ideal-transportation.log
          
          echo "=== Error Logs ==="
          sudo tail -n 50 /var/log/ideal-transportation.error.log
          
          echo "=== Journal Logs ==="
          sudo journalctl -u ideal-transportation -n 50 --no-pager

    - name: Setup Frontend
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          # Create frontend directory
          sudo mkdir -p /home/ubuntu/ideal-transportation/.next
          sudo chown -R ubuntu:ubuntu /home/ubuntu/ideal-transportation/.next

    - name: Copy Frontend Build
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: "out/"
        target: "/home/ubuntu/ideal-transportation/frontend"
        strip_components: 1

    - name: Set Frontend Permissions
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          # First, ensure ubuntu user owns everything
          sudo chown -R ubuntu:ubuntu /home/ubuntu/ideal-transportation
          
          # Then set nginx permissions
          sudo chown -R www-data:www-data /home/ubuntu/ideal-transportation/frontend
          sudo chmod -R 755 /home/ubuntu/ideal-transportation/frontend
          sudo chmod -R 644 /home/ubuntu/ideal-transportation/frontend/*.html
          sudo chmod -R 644 /home/ubuntu/ideal-transportation/frontend/*.txt
          sudo chmod -R 755 /home/ubuntu/ideal-transportation/frontend/_next
          sudo chmod -R 644 /home/ubuntu/ideal-transportation/frontend/_next/static/*
          sudo chmod -R 644 /home/ubuntu/ideal-transportation/frontend/_next/chunks/*
          sudo chmod -R 644 /home/ubuntu/ideal-transportation/frontend/_next/app/*
          
          # Add nginx user to ubuntu group
          sudo usermod -a -G ubuntu www-data
          
          # Verify permissions
          ls -la /home/ubuntu/ideal-transportation/frontend
          ls -la /home/ubuntu/ideal-transportation/frontend/_next

    - name: Setup Nginx
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          # Setup nginx
          sudo tee /etc/nginx/sites-available/ideal-transportation << 'EOF'
          server {
              listen 80;
              server_name _;

              root /home/ubuntu/ideal-transportation/frontend;
              index index.html;

              # Enable detailed error logging
              error_log /var/log/nginx/ideal-transportation.error.log debug;
              access_log /var/log/nginx/ideal-transportation.access.log;

              # Next.js static files
              location /_next/static/ {
                  alias /home/ubuntu/ideal-transportation/frontend/_next/static/;
                  expires 365d;
                  access_log off;
                  add_header Cache-Control "public, max-age=31536000, immutable";
                  try_files $uri =404;
              }

              # Next.js chunks
              location /_next/chunks/ {
                  alias /home/ubuntu/ideal-transportation/frontend/_next/chunks/;
                  expires 365d;
                  access_log off;
                  add_header Cache-Control "public, max-age=31536000, immutable";
                  try_files $uri =404;
              }

              # Next.js app directory
              location /_next/app/ {
                  alias /home/ubuntu/ideal-transportation/frontend/_next/app/;
                  expires 365d;
                  access_log off;
                  add_header Cache-Control "public, max-age=31536000, immutable";
                  try_files $uri =404;
              }

              # Frontend routes
              location / {
                  try_files $uri $uri.html $uri/index.html /index.html;
                  add_header Cache-Control "no-cache";
              }

              # Backend API
              location /api/ {
                  proxy_pass http://localhost:8000/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              # Health check endpoint
              location /health {
                  proxy_pass http://localhost:8000/health;
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF

          # Enable nginx site
          sudo ln -sf /etc/nginx/sites-available/ideal-transportation /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Test and restart nginx
          sudo nginx -t
          sudo systemctl restart nginx
          
          # Verify deployment
          echo "Testing endpoints:"
          curl -v http://localhost:8000/health
          curl -v http://localhost/
          
          # Check nginx status
          sudo systemctl status nginx
          
          # Check logs
          echo "Nginx error log:"
          sudo tail -n 50 /var/log/nginx/ideal-transportation.error.log

    - name: Verify Deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          # Check service status
          sudo systemctl status ideal-transportation
          sudo systemctl status nginx
          
          # Check logs
          sudo tail -n 50 /var/log/ideal-transportation.log
          sudo tail -n 50 /var/log/ideal-transportation.error.log
          sudo tail -n 50 /var/log/nginx/error.log
          
          # Test endpoints
          curl -v http://localhost:8000/health
          curl -v http://localhost/
          
          # Check processes and ports
          ps aux | grep uvicorn
          sudo netstat -tulpn | grep -E ':(80|8000)'
          
          # Check frontend files
          echo "=== Frontend Files ==="
          ls -la /home/ubuntu/ideal-transportation/frontend
          echo "=== Frontend Files Contents ==="
          find /home/ubuntu/ideal-transportation/frontend -type f -name "*.html" | xargs ls -la
          
          # Check Nginx configuration
          echo "=== Nginx Configuration ==="
          sudo nginx -T
          
          # Check Nginx error log
          echo "=== Nginx Error Log ==="
          sudo tail -n 50 /var/log/nginx/error.log
          
          # Check file permissions
          echo "=== File Permissions ==="
          ls -la /home/ubuntu/ideal-transportation/
          ls -la /home/ubuntu/ideal-transportation/frontend/
          
          # Check if index.html exists
          echo "=== Checking for index.html ==="
          find /home/ubuntu/ideal-transportation/frontend -name "index.html"

    env:
      DATABASE_URL: postgresql://idealtransport:idealtransport19041988@idealtransport.cvyuacwgotuv.ap-southeast-2.rds.amazonaws.com:5432/idealtransport
      SECRET_KEY: your-secret-key-here 