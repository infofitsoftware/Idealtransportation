name: Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Frontend Dependencies
      working-directory: ./src
      run: |
        npm ci
        npm run build
      env:
        NEXT_PUBLIC_API_URL: http://${{ secrets.EC2_HOST }}/api

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install "pydantic[email]"
        pip install -r requirements.txt

    - name: Run Backend Tests
      working-directory: ./backend
      run: pytest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Install required packages if not present
          if ! command -v git &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y git nodejs npm python3-pip python3-venv nginx
          fi

          # Check if it's first deployment
          if [ ! -d /home/ubuntu/ideal-transportation ]; then
            # First time setup
            mkdir -p /home/ubuntu/ideal-transportation
            cd /home/ubuntu/ideal-transportation
            
            # Clone using SSH URL
            git clone git@github.com:${{ github.repository }}.git .
            
            # Export environment variables for setup script
            export DATABASE_URL="${{ secrets.DATABASE_URL }}"
            export SECRET_KEY="${{ secrets.SECRET_KEY }}"
            
            # Make setup script executable and run it
            chmod +x backend/setup.sh
            ./backend/setup.sh
          else
            # Update existing deployment
            cd /home/ubuntu/ideal-transportation
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Deploy Backend
          cd backend
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate
          pip install "pydantic[email]"
          pip install -r requirements.txt
          
          # Create and enable systemd service if it doesn't exist
          if [ ! -f /etc/systemd/system/ideal-transportation.service ]; then
            sudo cp ideal-transportation.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable ideal-transportation
          fi
          sudo systemctl restart ideal-transportation
          
          # Deploy Frontend
          cd ../src
          npm ci
          npm run build
          
          # Configure and restart nginx if needed
          if [ ! -f /etc/nginx/sites-available/ideal-transportation ]; then
            sudo cp ../backend/nginx.conf /etc/nginx/sites-available/ideal-transportation
            sudo ln -sf /etc/nginx/sites-available/ideal-transportation /etc/nginx/sites-enabled/
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo nginx -t
          fi
          sudo systemctl restart nginx

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }} 