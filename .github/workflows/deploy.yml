name: Deploy to EC2

# This workflow will deploy the application to the ec2 instance
# Last updated: 2024-08-06

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Frontend Dependencies
      working-directory: ./
      run: |
        npm ci
        npm run build
        ls -la out/  # Verify build output
      env:
        NEXT_PUBLIC_API_URL: https://app.ditsxpress.com

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install "pydantic[email]"
        pip install -r requirements.txt

    - name: Run Backend Tests
      working-directory: ./backend
      run: pytest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Check EC2 Instance Status
      run: |
        echo "Checking EC2 instance status..."
        aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].[InstanceId,PublicIpAddress,State.Name,SecurityGroups[*].GroupId]" --output table
        
        echo "Checking instance security groups..."
        INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].[InstanceId]" --output text)
        if [ ! -z "$INSTANCE_ID" ]; then
          echo "Found instance: $INSTANCE_ID"
          aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].SecurityGroups[*].[GroupId,GroupName]" --output table
          
          echo "Checking security group rules..."
          SG_ID=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].SecurityGroups[*].GroupId" --output text)
          if [ ! -z "$SG_ID" ]; then
            aws ec2 describe-security-groups --group-ids $SG_ID --query "SecurityGroups[*].IpPermissions[*].[FromPort,ToPort,IpRanges[*].CidrIp]" --output table
          else
            echo "No security group found for instance"
          fi
        else
          echo "No running instances found"
        fi

    - name: Test SSH Connection
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          echo "Testing SSH connection..."
          whoami
          pwd
          hostname

    - name: Setup Application Directory
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          echo "Setting up application directory..."
          sudo apt-get update
          sudo apt-get install -y git nodejs npm python3-pip python3-venv nginx net-tools
          sudo mkdir -p /home/ubuntu/ideal-transportation
          sudo chown -R ubuntu:ubuntu /home/ubuntu/ideal-transportation
          sudo chmod o+x /home/ubuntu
          cd /home/ubuntu/ideal-transportation
          
          # Clean up old backups and handle frontend directory
          if [ -d "frontend_backup" ]; then
            echo "Removing old backup..."
            sudo rm -rf frontend_backup
          fi
          
          if [ -d "frontend" ]; then
            echo "Creating backup of existing frontend..."
            sudo mv frontend frontend_backup
          fi
          
          # Clean up any remaining files
          sudo rm -rf * .[^.]*
          
          echo "Directory setup complete. Current contents:"
          ls -la

    - name: Clone Repository
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          cd /home/ubuntu/ideal-transportation
          git clone ${{ secrets.REPO_URL }} .
          ls -la

    - name: Setup Backend
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          # Create and activate virtual environment
          cd /home/ubuntu/ideal-transportation/backend
          python3 -m venv venv
          source venv/bin/activate
          
          # Install dependencies
          pip install -r requirements.txt
          
          # Create .env file
          sudo tee /home/ubuntu/ideal-transportation/backend/.env << 'EOF'
          # Database configuration
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          
          # JWT Configuration
          SECRET_KEY=${{ secrets.JWT_SECRET }}
          ACCESS_TOKEN_EXPIRE_MINUTES=30
          
          # Logging configuration
          LOG_DIR=logs
          
          # CORS configuration
          CORS_ORIGINS=["http://localhost:3000", "https://app.ditsxpress.com", "http://app.ditsxpress.com", "http://13.221.221.48"]
          EOF
          
          # Set permissions for .env file
          sudo chown ubuntu:ubuntu /home/ubuntu/ideal-transportation/backend/.env
          sudo chmod 600 /home/ubuntu/ideal-transportation/backend/.env
          
          # Create logs directory
          sudo mkdir -p /home/ubuntu/ideal-transportation/backend/logs
          sudo chown -R ubuntu:ubuntu /home/ubuntu/ideal-transportation/backend/logs
          
          # Start backend service
          sudo tee /etc/systemd/system/ideal-transportation.service << 'EOF'
          [Unit]
          Description=Ideal Transportation Backend
          After=network.target
          
          [Service]
          User=ubuntu
          Group=ubuntu
          WorkingDirectory=/home/ubuntu/ideal-transportation/backend
          Environment="PATH=/home/ubuntu/ideal-transportation/backend/venv/bin"
          ExecStart=/home/ubuntu/ideal-transportation/backend/venv/bin/uvicorn main:app --host 0.0.0.0 --port 8000 --log-level debug
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Reload systemd and start service
          sudo systemctl daemon-reload
          sudo systemctl enable ideal-transportation
          sudo systemctl restart ideal-transportation
          
          # Verify service status
          sudo systemctl status ideal-transportation

    - name: Setup Frontend
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          # Create frontend directory
          sudo mkdir -p /home/ubuntu/ideal-transportation/.next
          sudo chown -R ubuntu:ubuntu /home/ubuntu/ideal-transportation/.next

    - name: Copy Frontend Build
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: "out/"
        target: "/home/ubuntu/ideal-transportation/frontend"
        strip_components: 1

    - name: Set Frontend Permissions
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          # Set permissions for frontend files
          sudo chown -R www-data:www-data /home/ubuntu/ideal-transportation/frontend
          
          # Fix directory permissions
          sudo find /home/ubuntu/ideal-transportation/frontend -type d -exec chmod 755 {} \;
          
          # Fix file permissions
          sudo find /home/ubuntu/ideal-transportation/frontend -type f -exec chmod 644 {} \;
          
          # Special handling for Next.js app directory
          sudo chmod -R 755 /home/ubuntu/ideal-transportation/frontend/_next
          sudo chmod -R 755 /home/ubuntu/ideal-transportation/frontend/_next/static
          sudo chmod -R 755 /home/ubuntu/ideal-transportation/frontend/_next/static/chunks
          sudo chmod -R 755 /home/ubuntu/ideal-transportation/frontend/_next/static/chunks/app
          sudo chmod -R 755 /home/ubuntu/ideal-transportation/frontend/_next/static/chunks/app/auth
          sudo chmod -R 755 /home/ubuntu/ideal-transportation/frontend/_next/static/chunks/app/auth/login
          
          # Verify permissions
          echo "=== Checking frontend permissions ==="
          ls -la /home/ubuntu/ideal-transportation/frontend/_next/static/chunks/app/auth
          ls -la /home/ubuntu/ideal-transportation/frontend/_next/static/chunks/app/auth/login
          
          # Check specific files
          echo "=== Checking specific files ==="
          ls -la /home/ubuntu/ideal-transportation/frontend/_next/static/chunks/app/auth/login/*.js || true

    - name: Setup SSL and Configure Nginx
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          # Step 1: Install SSL certificate if it doesn't exist
          if [ ! -f "/etc/letsencrypt/live/app.ditsxpress.com/fullchain.pem" ]; then
            echo "SSL certificate not found. Installing Let's Encrypt SSL..."
            
            # Install Certbot if not already installed
            sudo apt-get update
            sudo apt-get install -y certbot python3-certbot-nginx
            
            # Stop nginx temporarily for standalone certificate generation
            sudo systemctl stop nginx
            
            # Generate SSL certificate using standalone mode
            sudo certbot certonly --standalone \
              --non-interactive \
              --agree-tos \
              --email idealtransolutions@gmail.com \
              --domains app.ditsxpress.com
            
            # Set up automatic renewal
            echo "0 12 * * * /usr/bin/certbot renew --quiet" | sudo crontab -
            
            echo "SSL certificate installed successfully!"
          else
            echo "SSL certificate already exists. Skipping installation."
          fi
          
          # Step 2: Always configure Nginx based on SSL certificate availability
          if [ -f "/etc/letsencrypt/live/app.ditsxpress.com/fullchain.pem" ]; then
            echo "SSL certificates found. Creating HTTPS configuration with redirect..."
            sudo tee /etc/nginx/sites-available/ideal-transportation << 'EOF'
# HTTP server - redirect to HTTPS
server {
    listen 80;
    server_name app.ditsxpress.com;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name app.ditsxpress.com;
    root /home/ubuntu/ideal-transportation/frontend;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/app.ditsxpress.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/app.ditsxpress.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/app.ditsxpress.com/chain.pem;
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Enable detailed error logging
    error_log /var/log/nginx/ideal-transportation.error.log debug;
    access_log /var/log/nginx/ideal-transportation.access.log;
    
    # Next.js static files
    location /_next/static/ {
        alias /home/ubuntu/ideal-transportation/frontend/_next/static/;
        add_header Cache-Control "public, max-age=31536000, immutable";
        try_files $uri =404;
    }
    
    # Next.js app directory chunks
    location /_next/static/chunks/app/ {
        alias /home/ubuntu/ideal-transportation/frontend/_next/static/chunks/app/;
        add_header Cache-Control "public, max-age=31536000, immutable";
        try_files $uri =404;
    }
    
    # Next.js app directory
    location /_next/app/ {
        alias /home/ubuntu/ideal-transportation/frontend/_next/app/;
        add_header Cache-Control "public, max-age=31536000, immutable";
        try_files $uri =404;
    }
    
    # Next.js chunks
    location /_next/chunks/ {
        alias /home/ubuntu/ideal-transportation/frontend/_next/chunks/;
        add_header Cache-Control "public, max-age=31536000, immutable";
        try_files $uri =404;
    }
    
    # Frontend routes
    location / {
        try_files $uri $uri.html $uri/index.html =404;
        add_header X-Debug-Path $request_filename;
        add_header X-Debug-Uri $uri;
    }
    
    # Backend API
    location /api/ {
        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://localhost:8000/health;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
EOF
            echo "HTTPS configuration created."
          else
            echo "SSL certificates not found. Creating HTTP-only configuration..."
            sudo tee /etc/nginx/sites-available/ideal-transportation << 'EOF'
server {
    listen 80;
    server_name app.ditsxpress.com _;
    root /home/ubuntu/ideal-transportation/frontend;
    
    # Enable detailed error logging
    error_log /var/log/nginx/ideal-transportation.error.log debug;
    access_log /var/log/nginx/ideal-transportation.access.log;
    
    # Next.js static files
    location /_next/static/ {
        alias /home/ubuntu/ideal-transportation/frontend/_next/static/;
        add_header Cache-Control "public, max-age=31536000, immutable";
        try_files $uri =404;
    }
    
    # Next.js app directory chunks
    location /_next/static/chunks/app/ {
        alias /home/ubuntu/ideal-transportation/frontend/_next/static/chunks/app/;
        add_header Cache-Control "public, max-age=31536000, immutable";
        try_files $uri =404;
    }
    
    # Next.js app directory
    location /_next/app/ {
        alias /home/ubuntu/ideal-transportation/frontend/_next/app/;
        add_header Cache-Control "public, max-age=31536000, immutable";
        try_files $uri =404;
    }
    
    # Next.js chunks
    location /_next/chunks/ {
        alias /home/ubuntu/ideal-transportation/frontend/_next/chunks/;
        add_header Cache-Control "public, max-age=31536000, immutable";
        try_files $uri =404;
    }
    
    # Frontend routes
    location / {
        try_files $uri $uri.html $uri/index.html =404;
        add_header X-Debug-Path $request_filename;
        add_header X-Debug-Uri $uri;
    }
    
    # Backend API
    location /api/ {
        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://localhost:8000/health;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
EOF
            echo "HTTP-only configuration created."
          fi
          
          # Step 3: Enable site and restart nginx
          sudo ln -sf /etc/nginx/sites-available/ideal-transportation /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Test nginx configuration before restart
          if sudo nginx -t; then
            echo "Nginx configuration is valid. Restarting nginx..."
            sudo systemctl restart nginx
            echo "Nginx restarted successfully."
          else
            echo "Nginx configuration test failed. Keeping current configuration."
            exit 1
          fi
          
          # Step 4: Verify setup
          sudo systemctl status nginx
          
          # Verify certificate status
          if [ -f "/etc/letsencrypt/live/app.ditsxpress.com/fullchain.pem" ]; then
            echo "✅ SSL Certificate is installed"
            sudo certbot certificates
            echo "Testing HTTPS connection..."
            curl -I https://app.ditsxpress.com/ || echo "HTTPS test failed"
          else
            echo "⚠️  SSL Certificate not found - running on HTTP only"
          fi

    - name: Verify Deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 30m
        debug: true
        script: |
          echo "=== Checking service status ==="
          sudo systemctl status ideal-transportation
          sudo systemctl status nginx
          
          echo "=== Checking logs ==="
          sudo tail -n 50 /var/log/ideal-transportation.log
          sudo tail -n 50 /var/log/ideal-transportation.error.log
          sudo tail -n 50 /var/log/nginx/error.log
          
          echo "=== Testing endpoints ==="
          curl -v http://localhost:8000/health
          curl -v http://localhost/
          
          echo "=== Checking frontend files ==="
          sudo ls -la /home/ubuntu/ideal-transportation/frontend/
          sudo ls -la /home/ubuntu/ideal-transportation/frontend/_next/
          
          echo "=== Checking for index.html ==="
          sudo find /home/ubuntu/ideal-transportation/frontend -name "index.html"
          
          echo "=== Checking Nginx configuration ==="
          sudo nginx -t
          
          echo "=== Checking file permissions ==="
          sudo ls -la /home/ubuntu/ideal-transportation/frontend/_next/static/chunks/
          sudo ls -la /home/ubuntu/ideal-transportation/frontend/_next/static/chunks/app/
          sudo ls -la /home/ubuntu/ideal-transportation/frontend/_next/static/chunks/pages/
          
          echo "=== Final SSL Certificate Status ==="
          if [ -f "/etc/letsencrypt/live/app.ditsxpress.com/fullchain.pem" ]; then
            echo "✅ SSL Certificate is installed and configured"
            sudo certbot certificates
            echo "Testing HTTPS connection..."
            curl -I https://app.ditsxpress.com/ || echo "HTTPS test failed"
            echo "Testing HTTP redirect..."
            curl -I http://app.ditsxpress.com/ || echo "HTTP test failed"
          else
            echo "⚠️  SSL Certificate not found - running on HTTP only"
            echo "To install SSL certificate, the first deployment will set it up automatically."
          fi

    env:
      DATABASE_URL: postgresql://idealtransport:idealtransport19041988@idealtransport.cvyuacwgotuv.ap-southeast-2.rds.amazonaws.com:5432/idealtransport
      SECRET_KEY: your-secret-key-here